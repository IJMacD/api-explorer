{"version":3,"sources":["ResponseBody.jsx","App.js","saveState.js","index.js"],"names":["ResponseBody","response","onDrillDown","React","useState","mode","setMode","useEffect","type","getHeader","headers","availableModes","unshift","map","am","key","className","style","outline","onClick","body","JSONBody","children","formatObject","object","Array","isArray","length","d","i","Object","entries","k","v","isID","Fragment","cursor","JSON","parse","e","console","log","found","find","h","toLowerCase","STORAGE_KEY","App","props","state","defaultData","saved","localStorage","getItem","restoreState","apiRoot","endpoint","method","history","loading","selectedIndex","this","url","start","Date","now","setState","fetch","r","text","status","duration","index","Math","max","min","item","newHistory","filter","newSelectedIndex","setSelected","data","toSave","setItem","stringify","selected","value","onChange","target","placeholder","test","color","href","navigator","clipboard","writeText","removeHistoryItem","sendQuery","onSubmit","preventDefault","disabled","join","backgroundColor","id","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00f3cfd9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ResponseBody.css';\r\n\r\nexport default function ResponseBody ({ response, onDrillDown }) {\r\n    const [ mode, setMode ] = React.useState(\"plain\");\r\n\r\n    React.useEffect(() => {\r\n        if (!response) {\r\n            return;\r\n        }\r\n\r\n        const type = getHeader(response.headers, \"Content-Type\");\r\n        if (type === \"application/json\") {\r\n            setMode(\"json\");\r\n        } else {\r\n            setMode(\"plain\");\r\n        }\r\n    }, [response]);\r\n\r\n    if (!response) {\r\n        return null;\r\n    }\r\n\r\n    const availableModes = [ \"plain\" ];\r\n\r\n    const type = getHeader(response.headers, \"Content-Type\");\r\n    if (type === \"application/json\") {\r\n        availableModes.unshift(\"json\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                availableModes.map(am => <button key={am} className=\"ResponseBody-mode\" style={am === mode ? { outline: \"1px solid blue\" } : null} onClick={()=>setMode(am)}>{am}</button>)\r\n            }\r\n            { mode === \"plain\" && <code>{response.body}</code> }\r\n            { mode === \"json\" && <JSONBody onDrillDown={onDrillDown}>{response.body}</JSONBody> }\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction JSONBody ({ children, onDrillDown }) {\r\n    if (!children) return null;\r\n\r\n    try {\r\n        const data = JSON.parse(children);\r\n\r\n        return formatObject(data, { onDrillDown });\r\n\r\n    } catch(e) {\r\n        console.log(e);\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction formatObject (object, { key=null, onDrillDown=null }) {\r\n    if (Array.isArray(object)) {\r\n        return (\r\n            <div key={key} className=\"JSONBody-array\">\r\n                <p>{`Array of ${object.length} items`}</p>\r\n                { object.map((d,i) => formatObject(d, { key: i, onDrillDown })) }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (typeof object === \"object\") {\r\n        return (\r\n            <dl key={key} className=\"JSONBody-object\">\r\n                {\r\n                    Object.entries(object).map(([k,v], i) => {\r\n                        const isID = k === \"id\" && typeof v === \"number\" && key !== null && onDrillDown !== null;\r\n                        const onClick = isID ? () => onDrillDown(v) : () => void 0;\r\n                        return (\r\n                            <Fragment key={i}>\r\n                                <dt>{k}</dt>\r\n                                <dd onClick={onClick} style={isID ? { cursor: \"pointer\" } : null}>\r\n                                    {formatObject(v, onDrillDown)}\r\n                                </dd>\r\n                            </Fragment>\r\n                        );\r\n                    })\r\n                }\r\n            </dl>\r\n        )\r\n    }\r\n\r\n    if (typeof object === \"boolean\") {\r\n        return <div key={key} className=\"JSONBody-boolean\">{object?\"true\":\"false\"}</div>;\r\n    }\r\n\r\n    return <div key={key} className={`JSONBody-${typeof object}`}>{object}</div>;\r\n}\r\n\r\n/**\r\n * \r\n * @param {[string,string[]]} headers \r\n * @param {string} key \r\n */\r\nfunction getHeader(headers, key) {\r\n    const found = headers.find(h => h[0].toLowerCase() === key.toLowerCase());\r\n    return found ? found[1] : null;\r\n}\r\n\r\nfunction Fragment ({ children }) {\r\n    return children;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { saveState, restoreState } from './saveState';\r\nimport ResponseBody from './ResponseBody';\r\n\r\nconst STORAGE_KEY = \"api-explorer-saved-state\";\r\n\r\n/**\r\n * @typedef QueryRecord\r\n * @prop {string} endpoint\r\n * @prop {\"GET\"|\"POST\"|\"PUT\"|\"DELETE\"|\"OPTION\"} method\r\n * @prop {number|\"error\"} status\r\n * @prop {[string,string][]} headers Array of key,value tuples\r\n * @prop {string} body\r\n * @prop {number} duration In milliseconds\r\n */\r\n\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = restoreState(STORAGE_KEY, {\r\n      apiRoot: \"\",\r\n      endpoint: \"\",\r\n      method: \"GET\",\r\n      /** @type {QueryRecord[]} */\r\n      history: [],\r\n      loading: false,\r\n      selectedIndex: -1,\r\n    });\r\n  }\r\n\r\n  async sendQuery () {\r\n    const { endpoint, method } = this.state;\r\n    const url = this.state.apiRoot + endpoint;\r\n    const start = Date.now();\r\n\r\n    try {\r\n      this.setState({ loading: true });\r\n      const r = await fetch(url, { method });\r\n      const body = await r.text();\r\n\r\n      this.setState({\r\n        loading: false,\r\n        history: [ {\r\n          endpoint,\r\n          method,\r\n          status: r.status,\r\n          headers: [...r.headers],\r\n          body,\r\n          duration: Date.now() - start,\r\n        }, ...this.state.history ],\r\n        selectedIndex: 0,\r\n      });\r\n    } catch (e) {\r\n      this.setState({\r\n        loading: false,\r\n        history: [ {\r\n          endpoint,\r\n          method,\r\n          status: \"error\",\r\n          headers: [],\r\n          body: null\r\n        }, ...this.state.history ],\r\n        selectedIndex: 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  setSelected (index) {\r\n    index = Math.max(0, Math.min(index, this.state.history.length - 1));\r\n    const item = this.state.history[index];\r\n    this.setState({\r\n      selectedIndex: index,\r\n      endpoint: item.endpoint,\r\n      method: item.method,\r\n    });\r\n  }\r\n\r\n  removeHistoryItem (index) {\r\n    const newHistory = this.state.history.filter((h,i) => i !== index);\r\n    const newSelectedIndex = Math.max(0, Math.min(this.state.selectedIndex, this.state.history.length - 1));\r\n    this.setState({\r\n      history: newHistory,\r\n      selectedIndex: newSelectedIndex,\r\n    }, () => this.setSelected(this.state.selectedIndex));\r\n  }\r\n\r\n  componentDidUpdate () {\r\n    const { loading, ...toSave } = this.state;\r\n    saveState(STORAGE_KEY, toSave);\r\n  }\r\n\r\n  render () {\r\n    const { history, selectedIndex } = this.state;\r\n    const selected = selectedIndex >= 0 && selectedIndex < history.length ? history[selectedIndex] : null;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <label>\r\n            API Root { ' ' }\r\n            <input className=\"App-apiroot\" value={this.state.apiRoot} onChange={e=>this.setState({ apiRoot: e.target.value })} placeholder=\"http://\" />\r\n          </label>\r\n        <div className=\"App-panels\">\r\n          <div className=\"App-History\">\r\n            <h2>History</h2>\r\n            <ul className=\"App-HistoryList\">\r\n              {\r\n                this.state.history.map((h,i) => {\r\n                  return (\r\n                    <li \r\n                      key={i}\r\n                      className={`${selectedIndex === i ? \"selected\" : \"\"} status-${h.status}`}\r\n                      onClick={()=>this.setSelected(i)}\r\n                    >\r\n                      <div className=\"App-HistoryList-title\">\r\n                        <span className={`badge badge-${h.method.toLowerCase()}`}>{h.method}</span>\r\n                        <span className=\"App-HistoryList-endpoint\">/{h.endpoint}</span>\r\n                        <span className=\"App-HistoryList-status\" style={/[45]\\d\\d/.test(h.status) ? { color: \"red\" } : null}>{h.status}</span>\r\n                      </div>\r\n                      {\r\n                        selectedIndex === i && (\r\n                          <div>\r\n                            <a href={`${this.state.apiRoot}${h.endpoint}`} target=\"_blank\">link</a>\r\n                            <a href=\"#\" onClick={() => navigator.clipboard.writeText(`curl${h.method !== \"GET\" ? ` -X ${h.method}` : ''} ${this.state.apiRoot}${h.endpoint}`)}>curl</a>\r\n                            <a href=\"#\" onClick={() => this.removeHistoryItem(i)}>remove</a>\r\n                            <a href=\"#\" onClick={() => (this.removeHistoryItem(i), this.sendQuery())}>refresh</a>\r\n                          </div>\r\n                        )\r\n                      }\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n          </div>\r\n          <div className=\"App-Request\">\r\n            <h2>Request</h2>\r\n            <form className=\"App-Request-url\" onSubmit={e=>{this.sendQuery(); e.preventDefault()}}>\r\n              <select disabled={this.state.loading} value={this.state.method} onChange={e=>this.setState({ method: e.target.value })}>\r\n                <option>GET</option>\r\n                <option>POST</option>\r\n                <option>PUT</option>\r\n                <option>DELETE</option>\r\n                <option>OPTION</option>\r\n              </select>\r\n              <input disabled={this.state.loading} value={this.state.endpoint} onChange={e=>this.setState({ endpoint: e.target.value })} placeholder=\"endpoint\" />\r\n              <button disabled={this.state.loading}>Send</button>\r\n            </form>\r\n          </div>\r\n          <div className=\"App-Response\">\r\n            <h2>Response</h2>\r\n            { selected && <div>Response Time: { selected.duration}ms</div> }\r\n            { \r\n              selected && <code className=\"App-Response-Headers\">\r\n                {\r\n                  [...selected.headers].map(([key, value]) => `${key}: ${value}`).join(\"\\n\")\r\n                }\r\n              </code> \r\n            }\r\n            <div className=\"App-Response-body\" style={{ backgroundColor: this.state.loading ? \"#CCC\" : \"\" }}>\r\n              <ResponseBody response={selected} onDrillDown={id => this.setState({ endpoint: `${this.state.endpoint}/${id}` }, () => this.sendQuery())} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export function restoreState (key, defaultData) {\r\n    const saved = localStorage.getItem(key);\r\n\r\n    if (saved === null) return defaultData;\r\n\r\n    try {\r\n        return JSON.parse(saved);\r\n    } catch (e) {\r\n        return defaultData;\r\n    }\r\n}\r\n\r\nexport function saveState (key, data) {\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}